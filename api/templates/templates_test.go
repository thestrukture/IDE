// This file was generated by Gopher Sauce.
// UPDATE IT TO BETTER TEST YOUR CODE.
package templates

import (
	"testing"

	"github.com/thestrukture/IDE/types"

	"github.com/cheikhshift/gos/onyx"
	"github.com/cheikhshift/gos/web"

	"errors"
)

func TestCss(t *testing.T) {

	defer onyx.DetectPanic(t, "Css")

	res := Css(types.Dex{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}
}
func TestJS(t *testing.T) {

	defer onyx.DetectPanic(t, "JS")

	res := JS(types.Dex{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}
}
func TestFA(t *testing.T) {

	defer onyx.DetectPanic(t, "FA")

	res := FA(types.Dex{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}
}
func TestPluginList(t *testing.T) {

	defer onyx.DetectPanic(t, "PluginList")

	PluginList(web.NoStruct{})
}
func TestLogin(t *testing.T) {

}

func TestModal(t *testing.T) {

	defer onyx.DetectPanic(t, "Modal")

	res := Modal(types.SModal{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}
}

func TestxButton(t *testing.T) {

	defer onyx.DetectPanic(t, "XButton")

	res := XButton(types.SButton{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestjButton(t *testing.T) {

	defer onyx.DetectPanic(t, "JButton")

	res := JButton(types.SButton{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestPUT(t *testing.T) {

	defer onyx.DetectPanic(t, "PUT")

	res := PUT(types.Aput{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestGroup(t *testing.T) {

	defer onyx.DetectPanic(t, "Group")

	res := Group(types.STab{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}
}
func TestRegister(t *testing.T) {

}
func TestAlert(t *testing.T) {

	defer onyx.DetectPanic(t, "Alert")

	res := Alert(types.Alertbs{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestStructEditor(t *testing.T) {

	defer onyx.DetectPanic(t, "StructEditor")

	res := StructEditor(types.VHuf{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestMethodEditor(t *testing.T) {

	defer onyx.DetectPanic(t, "MethodEditor")

	res := MethodEditor(types.VHuf{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}
}
func TestObjectEditor(t *testing.T) {

	defer onyx.DetectPanic(t, "ObjectEditor")

	res := ObjectEditor(types.VHuf{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}
}

func TestEndpointEditor(t *testing.T) {

	defer onyx.DetectPanic(t, "EndpointEditor")

	res := EndpointEditor(types.TEditor{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestTimerEditor(t *testing.T) {

	defer onyx.DetectPanic(t, "TimerEditor")

	res := TimerEditor(types.TEditor{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}

func TestFSC(t *testing.T) {

	defer onyx.DetectPanic(t, "FSC")

	res := FSC(types.FSCs{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestMV(t *testing.T) {

	defer onyx.DetectPanic(t, "MV")

	res := MV(types.FSCs{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestRM(t *testing.T) {

	defer onyx.DetectPanic(t, "RM")

	res := RM(types.FSCs{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestWebRootEdit(t *testing.T) {

	defer onyx.DetectPanic(t, "WebRootEdit")

	res := WebRootEdit(types.WebRootEdits{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestWebRootEdittwo(t *testing.T) {

	defer onyx.DetectPanic(t, "WebRootEdittwo")

	res := WebRootEdittwo(types.WebRootEdits{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestuSettings(t *testing.T) {

	defer onyx.DetectPanic(t, "USettings")

	res := USettings(types.USettings{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestForm(t *testing.T) {

	defer onyx.DetectPanic(t, "Form")

	res := Form(types.Forms{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestSWAL(t *testing.T) {

	defer onyx.DetectPanic(t, "SWAL")

	res := SWAL(types.SSWAL{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestROC(t *testing.T) {

	defer onyx.DetectPanic(t, "ROC")

	res := ROC(types.SROC{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}
}
func TestRPUT(t *testing.T) {

	defer onyx.DetectPanic(t, "RPUT")

	res := RPUT(types.RPut{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}
}
func TestPackageEdit(t *testing.T) {

	defer onyx.DetectPanic(t, "PackageEdit")

	res := PackageEdit(types.SPackageEdit{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}
}
func TestDelete(t *testing.T) {

	defer onyx.DetectPanic(t, "Delete")

	res := Delete(types.DForm{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestWelcome(t *testing.T) {
	defer onyx.DetectPanic(t, "Welcome")

	res := Welcome(types.Dex{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}
}

func TestStripe(t *testing.T) {

}

func TestDebugger(t *testing.T) {

}

func TestTemplateEdit(t *testing.T) {

	defer onyx.DetectPanic(t, "TemplateEdit")

	res := TemplateEdit(types.TemplateEdits{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestTemplateEditTwo(t *testing.T) {

	defer onyx.DetectPanic(t, "TemplateEditTwo")

	res := TemplateEditTwo(types.TemplateEdits{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestInput(t *testing.T) {

	defer onyx.DetectPanic(t, "Input")

	res := Input(types.Inputs{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}
}
func TestDebuggerNode(t *testing.T) {

}
func TestSubmit(t *testing.T) {

	defer onyx.DetectPanic(t, "Submit")

	res := Submit(types.Dex{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestLogo(t *testing.T) {

	defer onyx.DetectPanic(t, "Logo")

	res := Logo(types.Dex{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestNavbar(t *testing.T) {

}
func TestNavCustom(t *testing.T) {

}
func TestNavMain(t *testing.T) {

}
func TestNavPKG(t *testing.T) {

	defer onyx.DetectPanic(t, "NavPKG")

	res := NavPKG(types.Dex{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestCrashedPage(t *testing.T) {

	defer onyx.DetectPanic(t, "CrashedPage")

	res := CrashedPage(types.Dex{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestEndpointTesting(t *testing.T) {

	defer onyx.DetectPanic(t, "EndpointTesting")

	res := EndpointTesting(types.Dex{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestKanBan(t *testing.T) {

	defer onyx.DetectPanic(t, "KanBan")

	res := KanBan(types.Dex{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}

}
func TestDocker(t *testing.T) {

	defer onyx.DetectPanic(t, "Docker")

	res := Docker(types.Dex{})

	if res == "" {
		panic(errors.New("Render returned an empty string."))
	}
}

func TestNavPromo(t *testing.T) {

}

func TestSearchProject(t *testing.T) {

	t.Error("Test for template SearchProject not implemented!!")
}
